from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Selecteer relevante kenmerken
selected_features = ['concave points_worst', 'perimeter_worst', 'concave points_mean', 'radius_worst', 'perimeter_mean']

# Selecteer de features en de target variable
X_selected = df[selected_features]
y = df['diagnosis_numeric']

# Split de data in training en test sets
X_train_selected, X_test_selected, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)

# Definieer het RandomForestClassifier-model
rf_classifier = RandomForestClassifier(random_state=42)

# Definieer het grid van hyperparameters om te doorzoeken
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Initialiseren van GridSearchCV
grid_search = GridSearchCV(estimator=rf_classifier, param_grid=param_grid, cv=5, scoring='accuracy', n_jobs=-1)

# Uitvoeren van de grid search op de geselecteerde functies
grid_search.fit(X_train_selected, y_train)

# Print de beste parameters gevonden door de grid search
print("Beste hyperparameters gevonden: ", grid_search.best_params_)

# Voorspel de diagnoses op basis van de test set met het model met de beste hyperparameters
y_pred_best_model = grid_search.best_estimator_.predict(X_test_selected)

# Evalueren van het model met de beste hyperparameters
accuracy_best_model = accuracy_score(y_test, y_pred_best_model)
print(f"Nauwkeurigheid met geselecteerde functies en beste hyperparameters: {accuracy_best_model:.2%}")

# Toon de classificatie rapport en de confusion matrix
print("\nClassification Report:")
print(classification_report(y_test, y_pred_best_model))

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred_best_model))
